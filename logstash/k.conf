input {
    kafka {
        bootstrap_servers => ["192.168.1.220:5044"]
        topics => ["log172","awsnginx"]
        codec => json
    }
}
filter {

    if [fields][logtypes] in ["nginx-access","vpn-nginx-access","sleep-nginx-access"] {

    		grok {
        		match => [
            	  		"message","%{IPORHOST:[nginx][access][remote_ip]} - %{DATA:[nginx][access][user_name]} \[%{HTTPDATE:[nginx][access][time]}\] \"%{WORD:[nginx][access][method]} %{DATA:[nginx][access][url]} HTTP/%{NUMBER:[nginx][access][http_version]}\" %{NUMBER:[nginx][access][response_code]} %{NUMBER:[nginx][access][body_sent][bytes]} \"%{DATA:[nginx][access][referrer]}\" \"%{DATA:[nginx][access][agent]}\" \"%{DATA:[nginx][access][forward]}\" %{NUMBER:[nginx][access][request_time]} \"%{NUMBER:no}, %{NUMBER:[nginx][access][upstream_response_time]}\"",
            	  		"message","%{IPORHOST:[nginx][access][remote_ip]} - %{DATA:[nginx][access][user_name]} \[%{HTTPDATE:[nginx][access][time]}\] \"%{WORD:[nginx][access][method]} %{DATA:[nginx][access][url]} HTTP/%{NUMBER:[nginx][access][http_version]}\" %{NUMBER:[nginx][access][response_code]} %{NUMBER:[nginx][access][body_sent][bytes]} \"%{DATA:[nginx][access][referrer]}\" \"%{DATA:[nginx][access][agent]}\" \"%{DATA:[nginx][access][forward]}\" %{NUMBER:[nginx][access][request_time]} \"%{NUMBER:[nginx][access][upstream_response_time]}\"",
				"message","%{IPORHOST:[nginx][access][remote_ip]} - %{DATA:[nginx][access][user_name]} \[%{HTTPDATE:[nginx][access][time]}\] \"%{WORD:[nginx][access][method]} %{DATA:[nginx][access][url]} HTTP/%{NUMBER:[nginx][access][http_version]}\" %{NUMBER:[nginx][access][response_code]} %{NUMBER:[nginx][access][body_sent][bytes]} \"%{DATA:[nginx][access][referrer]}\" \"%{DATA:[nginx][access][agent]}\" \"%{DATA:[nginx][access][forward]}\" %{NUMBER:[nginx][access][request_time]}"
        		]
		  	remove_field => "message"
    		}

		mutate {
		  add_field => { "read_timestamp" => "%{@timestamp}" }
                  convert => ["[nginx][access][request_time]", "float"]
                  convert => ["[nginx][access][upstream_response_time]", "float"]
		}

		date {
		  match => [ "[nginx][access][time]", "dd/MMM/YYYY:H:m:s Z" ]
		  remove_field => "[nginx][access][time]"
		}
		
		useragent {
			source => "[nginx][access][agent]"
			target => "[nginx][access][user_agent]"
			remove_field => "[nginx][access][agent]"
		}
		
		geoip {
		  database => "/usr/local/logstash-7.5.1/GeoLite2-City.mmdb"
		  source => "[nginx][access][remote_ip]"
		  target => "[nginx][access][geoip]"
		}

    } 


    else if [fields][logtypes] in ["nginx-error","vpn-nginx-error","sleep-nginx-error"] {

		grok {
			match => ["message","%{DATA:[nginx][error][time]} \[%{DATA:[nginx][error][level]}\] %{NUMBER:[nginx][error][pid]}#%{NUMBER:[nginx][error][tid]}: (\*%{NUMBER:[nginx][error][connection_id]} )?%{GREEDYDATA:[nginx][error][message]}(?:, client: (?<client_ip>%{IP}))(?:, server: %{IPORHOST:server}?)(?:, request: \"%{WORD:[nginx][error][verb]} %{URIPATHPARAM:[nginx][error][request]} HTTP/%{NUMBER:[nginx][error][http_version]}\")?"]
			
			#match => ["message","%{DATA:[nginx][error][time]} \[%{DATA:[nginx][error][level]}\] %{NUMBER:[nginx][error][pid]}#%{NUMBER:[nginx][error][tid]}: (\*%{NUMBER:[nginx][error][connection_id]} )?%{GREEDYDATA:[nginx][error][message]}"]
			
			remove_field => "message"
		}
    
		mutate {
		  rename => { "@timestamp" => "read_timestamp" }
		  remove_field => "server"
		}
    
		date {
		  match => [ "[nginx][error][time]", "YYYY/MM/dd H:m:s" ]
		  remove_field => "[nginx][error][time]"
		}
		
		geoip {
		  database => "/usr/local/logstash-7.5.1/GeoLite2-City.mmdb"
		  source => "client_ip"
		  target => "[nginx][error][geoip]"
		}
	
    }
	
	else if [fields][logtypes] == "shadowsocks" {
	
	    grok {
		    match => ["message","(?<timestamp>^\d{4}(-\d\d){2} \d\d(:\d\d){2}) %{DATA:[ss][level]} \s+%{GREEDYDATA:[ss][message]}"]
			remove_field => "message"
		}
		
		date {
			match => [ "timestamp", "YYYY/MM/dd H:m:s" ]
			remove_field => "timestamp"
		}
		
	}

}

output {

	if [fields][logtypes] in ["nginx-access", "nginx-error"] {
	
		elasticsearch {
			hosts => ["127.0.0.1:9200"]
			index => "vpn-balance"
                        user => "elastic"
                        password => "123456"
		}
		stdout {codec => rubydebug}
	
	}
	
	else if [fields][logtypes] == "shadowsocks" {
		elasticsearch {
			hosts => ["127.0.0.1:9200"]
			index => "shadowsocks"
                        user => "elastic"
                        password => "123456"
		}
		stdout {codec => rubydebug}
	}
	
	else if [fields][logtypes] in ["vpn-nginx-access", "vpn-nginx-error"] {
	
		elasticsearch {
			hosts => ["127.0.0.1:9200"]
			index => "vpn-api"
                        user => "elastic"
                        password => "123456"
		}
		stdout {codec => rubydebug}
	
	}


	else if [fields][logtypes] in ["sleep-nginx-access", "sleep-nginx-error"] {
	
		elasticsearch {
			hosts => ["127.0.0.1:9200"]
			index => "sleep-api"
                        user => "elastic"
                        password => "123456"
		}
		stdout {codec => rubydebug}
	
	}
	
}
